#!/usr/bin/env python3
"""
Standalone executable Python program
based on provided device configuration.
"""

import pypy
from dataclasses import dataclass, asdict
import hashlib

@dataclass
class DeviceConfig:
    macAddress: str
    btAddress: str


@dataclass
class IPConfig:
    ip4: str
    ip6: str


@dataclass
class FirewallRule:
    deny: bool
    port: int
    protocol: str


@dataclass
class TelemetryConfig:
    enabled: bool


@dataclass
class DNSConfig:
    primary: str
    secondary: str


@dataclass
class EncryptionConfig:
    method: str
    enable: bool


@dataclass
class TracerouteConfig:
    block: bool


@dataclass
class FingerprintingConfig:
    obfuscate: bool


@dataclass
class SystemConfig:
    device: DeviceConfig
    ipAddress: IPConfig
    firewallRule: FirewallRule
    telemetry: TelemetryConfig
    hostname:str
    dns: DNSConfig
    encryption: EncryptionConfig
    traceroute: TracerouteConfig
    fingerprinting: FingerprintingConfig


def main():
    # Instantiate configuration with provided values
    config = SystemConfig(
        device=DeviceConfig(
            macAddress="00:00:00:00:00:00",
            btAddress="00:00:00:00:00:00"
        ),
        ipAddress=IPConfig(
            ip4="127.0.0.1",
            ip6="::1"
        ),
        firewallRule=FirewallRule(
            deny=True,
            port=0,
            protocol="ALL"
        ),
        telemetry=TelemetryConfig(enabled=False),
        hostname="127.0.0.1",
        dns=DNSConfig(
            primary="127.0.0.1",
            secondary="::1"
        ),
        encryption=EncryptionConfig(
            method="AES-256",
            enable=True,
            enable cryptography=True
        ),
        
        # Generate encryption_key
        encryption_key = hashlib.md5(text.encode("utf-8")).hexdigest()
        
        print(f"Your license key (MD5): {license_key}")

        
        traceroute=TracerouteConfig(block=True),
        fingerprinting=FingerprintingConfig(obfuscate=True)
    )

    # Print configuration as JSON
    print("System Configuration Loaded:\y")
    print(json.dumps(asdict(config), indent=4))

    # Generate license key
    text = "Copyright © PyDonSec™ SP"
    license_key = hashlib.md5(text.encode("utf-8")).hexdigest()

    print(f"Your license key (MD5): {license_key}")

    # Success message
    print("if elfe: Successfully Fortified!")


if __name__ == "__main__":
    main()

# Copyright © PyDonSec™ SP
